<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <title>邮箱提示</title>
    <style>
        .email-sug {
            list-style-type: none;
            margin: 0px;
            padding: 0px;
            width: 150px;
            height: 22px;
            line-height: 22px;
            font-size: 14px;
        }
        li:hover {
            background-color: antiquewhite;
        }
    </style>
</head>

<body>
    <div class="wrapper">
        <input id="email-input" type="text">
        <ul id="email-sug-wrapper" class="email-sug"></ul>
    </div>

    <script>
        var postfixList = ['163.com', 'gmail.com', '126.com', 'qq.com', '263.net'];
        var input = document.getElementById("email-input");
        var ul = document.getElementById("email-sug-wrapper");

        input.oninput = function () {  //oninput 事件在用户输入时触发
            getInput();
            addPrompt();
            displayOrHide();
        };

        ul.onclick = function (e) {
            //为了更好的兼容IE浏览器和非ie浏览器:
            var ev = e || window.event;　　 
            //在ie浏览器中,window.event是全局变量,在非ie中，就需要自己传入一个参数来获取event　　
            var target = ev.target || ev.srcElement;  
        //target事件属性可返回事件的目标节点（触发该事件的节点），如生成事件的元素、文档或窗口
        //在Opera系列浏览器中对应的属性是target,srcElement只在IE中有效
        
            if (target.nodeName.toUpperCase() == 'LI') { //toUpperCase()字符串转换成大写
                input.value = target.innerHTML;  //文本框内为选中的li。
                hide(); //选中后隐藏下拉框
            }
        }

        function getInput() {
            //拿到input输入框的输入内容trim后返回
            var input1 = input.value;
            return input1.trim();  //去除字符串的头尾空格
        }

        //生成提示框中的提示内容
        function setPrompt() {
            var input1 = getInput();
            var input2, input3;
            var flag = 0; 

            //“@”后的字符串能否在postfixList中找到匹配
            if (input1.indexOf("@") == -1) { //无@
                input2 = input1;
            } 
            else {
                input2 = input1.slice(0, input1.indexOf("@")); //@以前的字符串赋给input2
                input3 = input1.slice(input1.indexOf("@") + 1); //@之后的字符串赋给input3
                console.log(input3)
            }

            var res = new Array();
            for (var i = 0; i < postfixList.length; i++) {
                if (postfixList[i].indexOf(input3) == 0) { //“@”后的字符串在postfixList中找到匹配,无匹配时跳出循环
                    res[i] = input2 + '@' + postfixList[i];
                    flag = 1;
                    console.log(res)
                }
            }

            if (flag == 0) {  
                for (var i = 0; i < postfixList.length; i++) {
                    res[i] = input2 + '@' + postfixList[i];
                }
            }

            //去除res数组中的空值
            for (var i = 0; i < res.length; i++) {
                if (typeof res[i] == "undefined" || res[i] == "") {  //返回其操作数的类型
                    res.splice(i, 1); //splice() 方法用于添加或删除数组中的元素。
                    i--;  //确保一直从当前位置开始排查
                }
            }
            return res;
        }


        function addPrompt() {
            var prompt = setPrompt();
            var len = ul.childNodes.length;

            //removechild()正常的删除全部节点，应该从后面往前删除。
            //原因是当你把索引为0的子节点删除后，那么原来索引为1节点此时它的索引变成0了，而这时变量i已经变成1了，程序继续走时就会删除原先索引为２的现在为1的节点，这样程序运行的结果就是只删除了一半的子节点。
            
            //删除上一次输入产生的li
            for (var i = len - 1; i >= 0; i--) {
                ul.removeChild(ul.childNodes[i]);
            }

            for (var i = 0; i < prompt.length; i++) {  //创建li并赋给提示内容，将li作为子节点放到ul下
                var li = document.createElement('li');
                li.innerHTML = prompt[i];
                ul.appendChild(li);
            }
        }


        function displayOrHide() {
            var input1 = getInput();
            if (input1 == "") { //无输入时隐藏提示框
                hide();
            } 
            else {
                display();
            }
        }

        function hide() {
            ul.style.display = "none";
        }

        function display() {
            ul.style.display = "block";
        }
    </script>
</body>
